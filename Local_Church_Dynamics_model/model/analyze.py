"""
a simple set of functions for plotting data generated by the model
    the functions are not ideally parametrized so it is expected to make
    changes in the code based on the results you want
can be executed or imported

the state is functional but some refactoring could be done

author: Jan Rychl√Ω
"""

import os

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

from Human import AGE_OFFSET_Y


def plotSingleRun(path, displayed=4):
    cols = {1: "never been",
            2: "attending",
            3: "left",
            4: "church",
            5: "spirit"}
    path = "output_model_data/" + path
    if not os.path.exists(path):
        print("no such file:", path)
        return
    data = pd.read_csv(path, header=1, index_col=False)
    sns.set()
    sns.lineplot(x="year", y=cols[displayed], data=data)


def plotConvergence(fileNO: int, displayed=5, plotType=1):
    # file number is "user friendly" aka first file is 1
    cols = { 1 : "year",
             2 : "never been",
             3 : "attending",
             4 : "left",
             5 : "church",
             6 : "spirit" }
    targetDataPath = "output_model_data/long_term_convergence/"
    dataFile = list(filter(lambda pth: pth[-4:] == ".csv",
                           os.listdir(targetDataPath)
                           ))[fileNO - 1]
    data = pd.read_csv(targetDataPath + dataFile, header=0, index_col=False)
    print(data)
    sns.set()
    if plotType == 1:
        sns.relplot(x="focus", y=cols[displayed], data=data) ## simple scatter
    elif plotType == 2:
        sns.catplot(kind="box", x="focus", ci="sd", y=cols[displayed], color="b", data=data) ## boxplot with quantiles
    elif plotType == 3:
        sns.regplot(x="focus", x_estimator=np.median, fit_reg=False, y=cols[displayed], color="b", data=data) ## regression + deviation
    elif plotType == 4:
        sns.regplot(x="focus", order=4, y=cols[displayed], color="b", data=data) ## regression + scatter
    else:
        sns.relplot(x="focus", y="church")


def plotAveragedData(fileNO: int, displayed=1, plotType=1):
    # file number is "user friendly" aka first file is 1
    cols = { 1 : "age_joined",
             2 : "age_left",
             3 : "avg_spirit",
             4 : "church_joined_total",
             5 : "club_joined_total",
             6 : "actually_left_total" }
    targetDataPath = "output_model_data/avg_x_over_focus/"
    dataFile = list(filter(lambda pth: pth[-4:] == ".csv",
                           os.listdir(targetDataPath)
                           ))[fileNO - 1]
    data = pd.read_csv(targetDataPath + dataFile, header=0, index_col=False)
    data.age_joined = data.age_joined + AGE_OFFSET_Y
    data.age_left = data.age_left + AGE_OFFSET_Y
    sns.set()
    if plotType == 1:
        sns.scatterplot(x="focus", y=cols[displayed], data=data)
    else:
        joinedAndLeft = data[["focus"] + list(cols.values())[:2]].melt(["focus"])
        sns.scatterplot(x="focus", y="value", hue="variable", data=joinedAndLeft)


def plotSensitivity(dirNO: int, displayed=4, plotType=1):
    # plot types: 1 - scatter; 2 - box plot; 3 - regression error bars; 4 - regression over scatter;
    cols = { 1 : "never been",
             2 : "attending",
             3 : "left",
             4 : "church",
             5 : "spirit" }
    targetDataPath = "output_model_data/focus_sensitivity_" + str(dirNO) + "/"

    allFrames = dict()
    for fileName in list(filter(lambda pth: pth[-4:] == ".csv", os.listdir(targetDataPath))):
        focus = pd.read_csv(targetDataPath + fileName, nrows=1, header=None).iloc[0, 1]
        data = pd.read_csv(targetDataPath + fileName, header=1)
        projected = data[["year"] + list(cols.values())]
        if plotType < 10:
            aggregated = projected.groupby("year").mean().iloc[39::10] # choosing selected years
        else:
            aggregated = projected.groupby("year").mean()
        aggregated.reset_index(level="year", inplace=True)
        aggregated.insert(0, "focus", [ focus for _ in range(len(aggregated.index)) ])
        if focus in allFrames.keys():
            allFrames[focus].append(aggregated)
        else:
            allFrames[focus] = [aggregated]

    merged = pd.concat(sum(allFrames.values(), []))
    sns.set()
    if plotType == 1:
        sns.relplot(x="focus", y=cols[displayed], data=merged) ## simple scatter
    elif plotType == 2:
        sns.catplot(kind="box", x="focus", ci="sd", y=cols[displayed], color="b", data=merged) ## boxplot with quantiles
    elif plotType == 3:
        sns.regplot(x="focus", x_estimator=np.median, order=5, y=cols[displayed], color="b", data=merged) ## regression + deviation
    elif plotType == 4:
        sns.regplot(x="focus", order=3, y=cols[displayed], color="b", data=merged) ## regression + scatter
    elif plotType == 11:
        merged = merged.groupby(["focus", "year"]).median().reset_index()
        sns.lineplot(x="year", y=cols[displayed], hue="focus", data=merged)
    elif plotType == 12:
        merged = merged.groupby(["focus", "year"]).median().reset_index()
        merged = merged[["focus", "year"] + ["attending", "church", "never been", "left"]].melt(["year", "focus"])
        sns.relplot(kind="line", x="year", y="value", col="variable", col_wrap=2,
                     hue="focus", data=merged)
    else:
        sns.relplot(x="focus", y="church")


def plotOverTime(dirNO: int, displayed=4, plotType=11):
    plotSensitivity(dirNO, displayed, plotType)


if __name__ == "__main__":
    file1 = list(filter(lambda pth: pth[-4:] == ".csv",
                           os.listdir("output_model_data/")
                 ))[0]
    print("plotting", file1)
    print("1: never been")
    print("2: attending")
    print("3: left")
    print("4: church")
    print("5: spirit")
    i = input("type in stat number to plot over time: ")
    
    plotSingleRun(file1, int(i))
    print("done")
    plt.show()

